/*
FileMage Gateway

FileMage Gateway provides a simple API to configure storage endpoints, users, and keys. Please note that all urls must end in a trailing slash, and the Content-Type header must be set to application/json.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemagego

import (
	"encoding/json"
)

// checks if the S3EndpointConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3EndpointConfig{}

// S3EndpointConfig Settings specific to Amazon S3 endpoint types.
type S3EndpointConfig struct {
	// Storage endpoint type. Use \"aws\" when connecting to Amazon S3.
	Type *string `json:"type,omitempty"`
	// The Amazon S3 bucket name.
	BucketName *string `json:"bucketName,omitempty"`
	// The access key to use to authenticate.
	AccessKey *string `json:"accessKey,omitempty"`
	// The secret key to use to authenticate.
	SecretKey *string `json:"secretKey,omitempty"`
	// Enabled to use the IAM role associated with the instance to authenticate.
	UseIamRole *bool `json:"useIamRole,omitempty"`
	// The server side encryption type to use when creating objects.
	SSE *string `json:"SSE,omitempty"`
	// The ARN of the KMS key to use when creating objects.
	KmsKeyArn *string `json:"kmsKeyArn,omitempty"`
}

// NewS3EndpointConfig instantiates a new S3EndpointConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3EndpointConfig() *S3EndpointConfig {
	this := S3EndpointConfig{}
	return &this
}

// NewS3EndpointConfigWithDefaults instantiates a new S3EndpointConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3EndpointConfigWithDefaults() *S3EndpointConfig {
	this := S3EndpointConfig{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *S3EndpointConfig) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3EndpointConfig) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *S3EndpointConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *S3EndpointConfig) SetType(v string) {
	o.Type = &v
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *S3EndpointConfig) GetBucketName() string {
	if o == nil || IsNil(o.BucketName) {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3EndpointConfig) GetBucketNameOk() (*string, bool) {
	if o == nil || IsNil(o.BucketName) {
		return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *S3EndpointConfig) HasBucketName() bool {
	if o != nil && !IsNil(o.BucketName) {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *S3EndpointConfig) SetBucketName(v string) {
	o.BucketName = &v
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *S3EndpointConfig) GetAccessKey() string {
	if o == nil || IsNil(o.AccessKey) {
		var ret string
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3EndpointConfig) GetAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *S3EndpointConfig) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given string and assigns it to the AccessKey field.
func (o *S3EndpointConfig) SetAccessKey(v string) {
	o.AccessKey = &v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *S3EndpointConfig) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3EndpointConfig) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *S3EndpointConfig) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *S3EndpointConfig) SetSecretKey(v string) {
	o.SecretKey = &v
}

// GetUseIamRole returns the UseIamRole field value if set, zero value otherwise.
func (o *S3EndpointConfig) GetUseIamRole() bool {
	if o == nil || IsNil(o.UseIamRole) {
		var ret bool
		return ret
	}
	return *o.UseIamRole
}

// GetUseIamRoleOk returns a tuple with the UseIamRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3EndpointConfig) GetUseIamRoleOk() (*bool, bool) {
	if o == nil || IsNil(o.UseIamRole) {
		return nil, false
	}
	return o.UseIamRole, true
}

// HasUseIamRole returns a boolean if a field has been set.
func (o *S3EndpointConfig) HasUseIamRole() bool {
	if o != nil && !IsNil(o.UseIamRole) {
		return true
	}

	return false
}

// SetUseIamRole gets a reference to the given bool and assigns it to the UseIamRole field.
func (o *S3EndpointConfig) SetUseIamRole(v bool) {
	o.UseIamRole = &v
}

// GetSSE returns the SSE field value if set, zero value otherwise.
func (o *S3EndpointConfig) GetSSE() string {
	if o == nil || IsNil(o.SSE) {
		var ret string
		return ret
	}
	return *o.SSE
}

// GetSSEOk returns a tuple with the SSE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3EndpointConfig) GetSSEOk() (*string, bool) {
	if o == nil || IsNil(o.SSE) {
		return nil, false
	}
	return o.SSE, true
}

// HasSSE returns a boolean if a field has been set.
func (o *S3EndpointConfig) HasSSE() bool {
	if o != nil && !IsNil(o.SSE) {
		return true
	}

	return false
}

// SetSSE gets a reference to the given string and assigns it to the SSE field.
func (o *S3EndpointConfig) SetSSE(v string) {
	o.SSE = &v
}

// GetKmsKeyArn returns the KmsKeyArn field value if set, zero value otherwise.
func (o *S3EndpointConfig) GetKmsKeyArn() string {
	if o == nil || IsNil(o.KmsKeyArn) {
		var ret string
		return ret
	}
	return *o.KmsKeyArn
}

// GetKmsKeyArnOk returns a tuple with the KmsKeyArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3EndpointConfig) GetKmsKeyArnOk() (*string, bool) {
	if o == nil || IsNil(o.KmsKeyArn) {
		return nil, false
	}
	return o.KmsKeyArn, true
}

// HasKmsKeyArn returns a boolean if a field has been set.
func (o *S3EndpointConfig) HasKmsKeyArn() bool {
	if o != nil && !IsNil(o.KmsKeyArn) {
		return true
	}

	return false
}

// SetKmsKeyArn gets a reference to the given string and assigns it to the KmsKeyArn field.
func (o *S3EndpointConfig) SetKmsKeyArn(v string) {
	o.KmsKeyArn = &v
}

func (o S3EndpointConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3EndpointConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.BucketName) {
		toSerialize["bucketName"] = o.BucketName
	}
	if !IsNil(o.AccessKey) {
		toSerialize["accessKey"] = o.AccessKey
	}
	if !IsNil(o.SecretKey) {
		toSerialize["secretKey"] = o.SecretKey
	}
	if !IsNil(o.UseIamRole) {
		toSerialize["useIamRole"] = o.UseIamRole
	}
	if !IsNil(o.SSE) {
		toSerialize["SSE"] = o.SSE
	}
	if !IsNil(o.KmsKeyArn) {
		toSerialize["kmsKeyArn"] = o.KmsKeyArn
	}
	return toSerialize, nil
}

type NullableS3EndpointConfig struct {
	value *S3EndpointConfig
	isSet bool
}

func (v NullableS3EndpointConfig) Get() *S3EndpointConfig {
	return v.value
}

func (v *NullableS3EndpointConfig) Set(val *S3EndpointConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableS3EndpointConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableS3EndpointConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3EndpointConfig(val *S3EndpointConfig) *NullableS3EndpointConfig {
	return &NullableS3EndpointConfig{value: val, isSet: true}
}

func (v NullableS3EndpointConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3EndpointConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


