/*
FileMage Gateway

FileMage Gateway provides a simple API to configure storage endpoints, users, and keys. Please note that all urls must end in a trailing slash, and the Content-Type header must be set to application/json.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemagego

import (
	"encoding/json"
)

// checks if the Permission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Permission{}

// Permission struct for Permission
type Permission struct {
	// The path of the folder the permission is applied to.
	Path *string `json:"path,omitempty"`
	// Enable to recursively apply permissions to all sub-folders.
	Sub *bool `json:"sub,omitempty"`
	// Specifies the permission level granted on the path.
	Grants *string `json:"grants,omitempty"`
	// When a target path is specified, any operations on the path of the permission folder are aliased to the target path, which can be on a different storage endpoint.
	TargetPath *string `json:"targetPath,omitempty"`
	// Required when target path is specified. The endpoint ID of storage endpoint to which the target path is aliased.
	EndpointId *int32 `json:"endpointId,omitempty"`
}

// NewPermission instantiates a new Permission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermission() *Permission {
	this := Permission{}
	return &this
}

// NewPermissionWithDefaults instantiates a new Permission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionWithDefaults() *Permission {
	this := Permission{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Permission) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Permission) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *Permission) SetPath(v string) {
	o.Path = &v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *Permission) GetSub() bool {
	if o == nil || IsNil(o.Sub) {
		var ret bool
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetSubOk() (*bool, bool) {
	if o == nil || IsNil(o.Sub) {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *Permission) HasSub() bool {
	if o != nil && !IsNil(o.Sub) {
		return true
	}

	return false
}

// SetSub gets a reference to the given bool and assigns it to the Sub field.
func (o *Permission) SetSub(v bool) {
	o.Sub = &v
}

// GetGrants returns the Grants field value if set, zero value otherwise.
func (o *Permission) GetGrants() string {
	if o == nil || IsNil(o.Grants) {
		var ret string
		return ret
	}
	return *o.Grants
}

// GetGrantsOk returns a tuple with the Grants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetGrantsOk() (*string, bool) {
	if o == nil || IsNil(o.Grants) {
		return nil, false
	}
	return o.Grants, true
}

// HasGrants returns a boolean if a field has been set.
func (o *Permission) HasGrants() bool {
	if o != nil && !IsNil(o.Grants) {
		return true
	}

	return false
}

// SetGrants gets a reference to the given string and assigns it to the Grants field.
func (o *Permission) SetGrants(v string) {
	o.Grants = &v
}

// GetTargetPath returns the TargetPath field value if set, zero value otherwise.
func (o *Permission) GetTargetPath() string {
	if o == nil || IsNil(o.TargetPath) {
		var ret string
		return ret
	}
	return *o.TargetPath
}

// GetTargetPathOk returns a tuple with the TargetPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetTargetPathOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPath) {
		return nil, false
	}
	return o.TargetPath, true
}

// HasTargetPath returns a boolean if a field has been set.
func (o *Permission) HasTargetPath() bool {
	if o != nil && !IsNil(o.TargetPath) {
		return true
	}

	return false
}

// SetTargetPath gets a reference to the given string and assigns it to the TargetPath field.
func (o *Permission) SetTargetPath(v string) {
	o.TargetPath = &v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *Permission) GetEndpointId() int32 {
	if o == nil || IsNil(o.EndpointId) {
		var ret int32
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Permission) GetEndpointIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EndpointId) {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *Permission) HasEndpointId() bool {
	if o != nil && !IsNil(o.EndpointId) {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given int32 and assigns it to the EndpointId field.
func (o *Permission) SetEndpointId(v int32) {
	o.EndpointId = &v
}

func (o Permission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Permission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Sub) {
		toSerialize["sub"] = o.Sub
	}
	if !IsNil(o.Grants) {
		toSerialize["grants"] = o.Grants
	}
	if !IsNil(o.TargetPath) {
		toSerialize["targetPath"] = o.TargetPath
	}
	if !IsNil(o.EndpointId) {
		toSerialize["endpointId"] = o.EndpointId
	}
	return toSerialize, nil
}

type NullablePermission struct {
	value *Permission
	isSet bool
}

func (v NullablePermission) Get() *Permission {
	return v.value
}

func (v *NullablePermission) Set(val *Permission) {
	v.value = val
	v.isSet = true
}

func (v NullablePermission) IsSet() bool {
	return v.isSet
}

func (v *NullablePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermission(val *Permission) *NullablePermission {
	return &NullablePermission{value: val, isSet: true}
}

func (v NullablePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


