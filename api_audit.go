/*
FileMage Gateway

FileMage Gateway provides a simple API to configure storage endpoints, users, and keys. Please note that all urls must end in a trailing slash, and the Content-Type header must be set to application/json.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemagego

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type AuditAPI interface {

	/*
	ListLogs Get audit log entries

	Return list of all audit log entries filtered by given parameters. Note that each request will return a maximum of 10,000 entries and no pagination is currently available. If necessary, you must filter by a shorted time span.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListLogsRequest
	*/
	ListLogs(ctx context.Context) ApiListLogsRequest

	// ListLogsExecute executes the request
	//  @return []AuditLog
	ListLogsExecute(r ApiListLogsRequest) ([]AuditLog, *http.Response, error)
}

// AuditAPIService AuditAPI service
type AuditAPIService service

type ApiListLogsRequest struct {
	ctx context.Context
	ApiService AuditAPI
	start *string
	end *string
	path *string
	operation *string
	user *string
}

// RFC 3339 timestamp of first event to return.
func (r ApiListLogsRequest) Start(start string) ApiListLogsRequest {
	r.start = &start
	return r
}

// RFC 3339 timestamp of last event to return.
func (r ApiListLogsRequest) End(end string) ApiListLogsRequest {
	r.end = &end
	return r
}

// Show only events for the object at this path.
func (r ApiListLogsRequest) Path(path string) ApiListLogsRequest {
	r.path = &path
	return r
}

// The operation type to filter by. Valid values are &#39;cd&#39;, &#39;mkdir&#39;, &#39;ls&#39;,&#39;get&#39;,&#39;put&#39;,&#39;stat&#39;,&#39;rmdir&#39;,&#39;rm&#39;,&#39;mv&#39;
func (r ApiListLogsRequest) Operation(operation string) ApiListLogsRequest {
	r.operation = &operation
	return r
}

// The username to filter by.
func (r ApiListLogsRequest) User(user string) ApiListLogsRequest {
	r.user = &user
	return r
}

func (r ApiListLogsRequest) Execute() ([]AuditLog, *http.Response, error) {
	return r.ApiService.ListLogsExecute(r)
}

/*
ListLogs Get audit log entries

Return list of all audit log entries filtered by given parameters. Note that each request will return a maximum of 10,000 entries and no pagination is currently available. If necessary, you must filter by a shorted time span.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListLogsRequest
*/
func (a *AuditAPIService) ListLogs(ctx context.Context) ApiListLogsRequest {
	return ApiListLogsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AuditLog
func (a *AuditAPIService) ListLogsExecute(r ApiListLogsRequest) ([]AuditLog, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AuditLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditAPIService.ListLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/logs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	if r.path != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "path", r.path, "")
	}
	if r.operation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "operation", r.operation, "")
	}
	if r.user != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user", r.user, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["filemage-api-token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
