/*
FileMage Gateway

FileMage Gateway provides a simple API to configure storage endpoints, users, and keys. Please note that all urls must end in a trailing slash, and the Content-Type header must be set to application/json.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemagego

import (
	"encoding/json"
)

// checks if the UserHome type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserHome{}

// UserHome Specify path, and permission level of user home directory
type UserHome struct {
	// Path of user home directory.
	Path *string `json:"path,omitempty"`
	// Recursively apply permissions to all sub-folders.
	Sub *bool `json:"sub,omitempty"`
	// Specifies permission level granted on home directory. Allowed values are 'list', 'read', 'write', 'full'.
	Grants *string `json:"grants,omitempty"`
}

// NewUserHome instantiates a new UserHome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserHome() *UserHome {
	this := UserHome{}
	return &this
}

// NewUserHomeWithDefaults instantiates a new UserHome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserHomeWithDefaults() *UserHome {
	this := UserHome{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *UserHome) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserHome) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *UserHome) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *UserHome) SetPath(v string) {
	o.Path = &v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *UserHome) GetSub() bool {
	if o == nil || IsNil(o.Sub) {
		var ret bool
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserHome) GetSubOk() (*bool, bool) {
	if o == nil || IsNil(o.Sub) {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *UserHome) HasSub() bool {
	if o != nil && !IsNil(o.Sub) {
		return true
	}

	return false
}

// SetSub gets a reference to the given bool and assigns it to the Sub field.
func (o *UserHome) SetSub(v bool) {
	o.Sub = &v
}

// GetGrants returns the Grants field value if set, zero value otherwise.
func (o *UserHome) GetGrants() string {
	if o == nil || IsNil(o.Grants) {
		var ret string
		return ret
	}
	return *o.Grants
}

// GetGrantsOk returns a tuple with the Grants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserHome) GetGrantsOk() (*string, bool) {
	if o == nil || IsNil(o.Grants) {
		return nil, false
	}
	return o.Grants, true
}

// HasGrants returns a boolean if a field has been set.
func (o *UserHome) HasGrants() bool {
	if o != nil && !IsNil(o.Grants) {
		return true
	}

	return false
}

// SetGrants gets a reference to the given string and assigns it to the Grants field.
func (o *UserHome) SetGrants(v string) {
	o.Grants = &v
}

func (o UserHome) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserHome) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Sub) {
		toSerialize["sub"] = o.Sub
	}
	if !IsNil(o.Grants) {
		toSerialize["grants"] = o.Grants
	}
	return toSerialize, nil
}

type NullableUserHome struct {
	value *UserHome
	isSet bool
}

func (v NullableUserHome) Get() *UserHome {
	return v.value
}

func (v *NullableUserHome) Set(val *UserHome) {
	v.value = val
	v.isSet = true
}

func (v NullableUserHome) IsSet() bool {
	return v.isSet
}

func (v *NullableUserHome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserHome(val *UserHome) *NullableUserHome {
	return &NullableUserHome{value: val, isSet: true}
}

func (v NullableUserHome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserHome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


