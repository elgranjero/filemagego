/*
FileMage Gateway

FileMage Gateway provides a simple API to configure storage endpoints, users, and keys. Please note that all urls must end in a trailing slash, and the Content-Type header must be set to application/json.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemagego

import (
	"encoding/json"
)

// checks if the PermissionDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionDetail{}

// PermissionDetail struct for PermissionDetail
type PermissionDetail struct {
	Id *int32 `json:"id,omitempty"`
	// Specifies the permission level granted on the path.
	Grants *string `json:"grants,omitempty"`
	// Enable to recursively apply permissions to all sub-folders.
	Sub *bool `json:"sub,omitempty"`
	// The name of the principal this permission is applied to.
	Name *string `json:"name,omitempty"`
	// Indicates if the principal is a user or group.
	Type *string `json:"type,omitempty"`
}

// NewPermissionDetail instantiates a new PermissionDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionDetail() *PermissionDetail {
	this := PermissionDetail{}
	return &this
}

// NewPermissionDetailWithDefaults instantiates a new PermissionDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionDetailWithDefaults() *PermissionDetail {
	this := PermissionDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PermissionDetail) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionDetail) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PermissionDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PermissionDetail) SetId(v int32) {
	o.Id = &v
}

// GetGrants returns the Grants field value if set, zero value otherwise.
func (o *PermissionDetail) GetGrants() string {
	if o == nil || IsNil(o.Grants) {
		var ret string
		return ret
	}
	return *o.Grants
}

// GetGrantsOk returns a tuple with the Grants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionDetail) GetGrantsOk() (*string, bool) {
	if o == nil || IsNil(o.Grants) {
		return nil, false
	}
	return o.Grants, true
}

// HasGrants returns a boolean if a field has been set.
func (o *PermissionDetail) HasGrants() bool {
	if o != nil && !IsNil(o.Grants) {
		return true
	}

	return false
}

// SetGrants gets a reference to the given string and assigns it to the Grants field.
func (o *PermissionDetail) SetGrants(v string) {
	o.Grants = &v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *PermissionDetail) GetSub() bool {
	if o == nil || IsNil(o.Sub) {
		var ret bool
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionDetail) GetSubOk() (*bool, bool) {
	if o == nil || IsNil(o.Sub) {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *PermissionDetail) HasSub() bool {
	if o != nil && !IsNil(o.Sub) {
		return true
	}

	return false
}

// SetSub gets a reference to the given bool and assigns it to the Sub field.
func (o *PermissionDetail) SetSub(v bool) {
	o.Sub = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PermissionDetail) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionDetail) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PermissionDetail) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PermissionDetail) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PermissionDetail) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionDetail) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PermissionDetail) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PermissionDetail) SetType(v string) {
	o.Type = &v
}

func (o PermissionDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Grants) {
		toSerialize["grants"] = o.Grants
	}
	if !IsNil(o.Sub) {
		toSerialize["sub"] = o.Sub
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePermissionDetail struct {
	value *PermissionDetail
	isSet bool
}

func (v NullablePermissionDetail) Get() *PermissionDetail {
	return v.value
}

func (v *NullablePermissionDetail) Set(val *PermissionDetail) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionDetail) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionDetail(val *PermissionDetail) *NullablePermissionDetail {
	return &NullablePermissionDetail{value: val, isSet: true}
}

func (v NullablePermissionDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


