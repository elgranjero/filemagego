/*
FileMage Gateway

FileMage Gateway provides a simple API to configure storage endpoints, users, and keys. Please note that all urls must end in a trailing slash, and the Content-Type header must be set to application/json.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemagego

import (
	"encoding/json"
)

// checks if the UserDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDetail{}

// UserDetail struct for UserDetail
type UserDetail struct {
	// User ID.
	Id *int32 `json:"id,omitempty"`
	// Username.
	Username *string `json:"username,omitempty"`
	// Endpoint ID associated with user.
	EndpointId *int32 `json:"endpointId,omitempty"`
	// Password authentication disabled.
	Disabled *bool `json:"disabled,omitempty"`
	Home *UserHome `json:"home,omitempty"`
	// Additional folder permissions assigned to the user.
	Permissions []Permission `json:"permissions,omitempty"`
	// Keys associated with this user.
	Keys []KeyInfo `json:"keys,omitempty"`
	// IP addresses which are allowed to connect as this user.
	Whitelist []string `json:"whitelist,omitempty"`
	// Require multi-factor authentication to be set up before allowing user to log in.
	MfaRequired *bool `json:"mfaRequired,omitempty"`
	// Indicates that this user should be authneticated using LDAP.
	Ldap *bool `json:"ldap,omitempty"`
	// A timestamp in ISO 8601 format indicating when the users account should no longer be accessible.
	Expires *string `json:"expires,omitempty"`
	// Indicates that the user has configured a OTP device.
	OtpEnabled *bool `json:"otpEnabled,omitempty"`
}

// NewUserDetail instantiates a new UserDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDetail() *UserDetail {
	this := UserDetail{}
	return &this
}

// NewUserDetailWithDefaults instantiates a new UserDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDetailWithDefaults() *UserDetail {
	this := UserDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserDetail) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserDetail) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserDetail) SetId(v int32) {
	o.Id = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserDetail) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserDetail) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserDetail) SetUsername(v string) {
	o.Username = &v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *UserDetail) GetEndpointId() int32 {
	if o == nil || IsNil(o.EndpointId) {
		var ret int32
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetEndpointIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EndpointId) {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *UserDetail) HasEndpointId() bool {
	if o != nil && !IsNil(o.EndpointId) {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given int32 and assigns it to the EndpointId field.
func (o *UserDetail) SetEndpointId(v int32) {
	o.EndpointId = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *UserDetail) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *UserDetail) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *UserDetail) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetHome returns the Home field value if set, zero value otherwise.
func (o *UserDetail) GetHome() UserHome {
	if o == nil || IsNil(o.Home) {
		var ret UserHome
		return ret
	}
	return *o.Home
}

// GetHomeOk returns a tuple with the Home field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetHomeOk() (*UserHome, bool) {
	if o == nil || IsNil(o.Home) {
		return nil, false
	}
	return o.Home, true
}

// HasHome returns a boolean if a field has been set.
func (o *UserDetail) HasHome() bool {
	if o != nil && !IsNil(o.Home) {
		return true
	}

	return false
}

// SetHome gets a reference to the given UserHome and assigns it to the Home field.
func (o *UserDetail) SetHome(v UserHome) {
	o.Home = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *UserDetail) GetPermissions() []Permission {
	if o == nil || IsNil(o.Permissions) {
		var ret []Permission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetPermissionsOk() ([]Permission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *UserDetail) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []Permission and assigns it to the Permissions field.
func (o *UserDetail) SetPermissions(v []Permission) {
	o.Permissions = v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *UserDetail) GetKeys() []KeyInfo {
	if o == nil || IsNil(o.Keys) {
		var ret []KeyInfo
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetKeysOk() ([]KeyInfo, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *UserDetail) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []KeyInfo and assigns it to the Keys field.
func (o *UserDetail) SetKeys(v []KeyInfo) {
	o.Keys = v
}

// GetWhitelist returns the Whitelist field value if set, zero value otherwise.
func (o *UserDetail) GetWhitelist() []string {
	if o == nil || IsNil(o.Whitelist) {
		var ret []string
		return ret
	}
	return o.Whitelist
}

// GetWhitelistOk returns a tuple with the Whitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetWhitelistOk() ([]string, bool) {
	if o == nil || IsNil(o.Whitelist) {
		return nil, false
	}
	return o.Whitelist, true
}

// HasWhitelist returns a boolean if a field has been set.
func (o *UserDetail) HasWhitelist() bool {
	if o != nil && !IsNil(o.Whitelist) {
		return true
	}

	return false
}

// SetWhitelist gets a reference to the given []string and assigns it to the Whitelist field.
func (o *UserDetail) SetWhitelist(v []string) {
	o.Whitelist = v
}

// GetMfaRequired returns the MfaRequired field value if set, zero value otherwise.
func (o *UserDetail) GetMfaRequired() bool {
	if o == nil || IsNil(o.MfaRequired) {
		var ret bool
		return ret
	}
	return *o.MfaRequired
}

// GetMfaRequiredOk returns a tuple with the MfaRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetMfaRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.MfaRequired) {
		return nil, false
	}
	return o.MfaRequired, true
}

// HasMfaRequired returns a boolean if a field has been set.
func (o *UserDetail) HasMfaRequired() bool {
	if o != nil && !IsNil(o.MfaRequired) {
		return true
	}

	return false
}

// SetMfaRequired gets a reference to the given bool and assigns it to the MfaRequired field.
func (o *UserDetail) SetMfaRequired(v bool) {
	o.MfaRequired = &v
}

// GetLdap returns the Ldap field value if set, zero value otherwise.
func (o *UserDetail) GetLdap() bool {
	if o == nil || IsNil(o.Ldap) {
		var ret bool
		return ret
	}
	return *o.Ldap
}

// GetLdapOk returns a tuple with the Ldap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetLdapOk() (*bool, bool) {
	if o == nil || IsNil(o.Ldap) {
		return nil, false
	}
	return o.Ldap, true
}

// HasLdap returns a boolean if a field has been set.
func (o *UserDetail) HasLdap() bool {
	if o != nil && !IsNil(o.Ldap) {
		return true
	}

	return false
}

// SetLdap gets a reference to the given bool and assigns it to the Ldap field.
func (o *UserDetail) SetLdap(v bool) {
	o.Ldap = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *UserDetail) GetExpires() string {
	if o == nil || IsNil(o.Expires) {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetExpiresOk() (*string, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *UserDetail) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *UserDetail) SetExpires(v string) {
	o.Expires = &v
}

// GetOtpEnabled returns the OtpEnabled field value if set, zero value otherwise.
func (o *UserDetail) GetOtpEnabled() bool {
	if o == nil || IsNil(o.OtpEnabled) {
		var ret bool
		return ret
	}
	return *o.OtpEnabled
}

// GetOtpEnabledOk returns a tuple with the OtpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDetail) GetOtpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.OtpEnabled) {
		return nil, false
	}
	return o.OtpEnabled, true
}

// HasOtpEnabled returns a boolean if a field has been set.
func (o *UserDetail) HasOtpEnabled() bool {
	if o != nil && !IsNil(o.OtpEnabled) {
		return true
	}

	return false
}

// SetOtpEnabled gets a reference to the given bool and assigns it to the OtpEnabled field.
func (o *UserDetail) SetOtpEnabled(v bool) {
	o.OtpEnabled = &v
}

func (o UserDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.EndpointId) {
		toSerialize["endpointId"] = o.EndpointId
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Home) {
		toSerialize["home"] = o.Home
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.Whitelist) {
		toSerialize["whitelist"] = o.Whitelist
	}
	if !IsNil(o.MfaRequired) {
		toSerialize["mfaRequired"] = o.MfaRequired
	}
	if !IsNil(o.Ldap) {
		toSerialize["ldap"] = o.Ldap
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.OtpEnabled) {
		toSerialize["otpEnabled"] = o.OtpEnabled
	}
	return toSerialize, nil
}

type NullableUserDetail struct {
	value *UserDetail
	isSet bool
}

func (v NullableUserDetail) Get() *UserDetail {
	return v.value
}

func (v *NullableUserDetail) Set(val *UserDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDetail(val *UserDetail) *NullableUserDetail {
	return &NullableUserDetail{value: val, isSet: true}
}

func (v NullableUserDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


