/*
FileMage Gateway

FileMage Gateway provides a simple API to configure storage endpoints, users, and keys. Please note that all urls must end in a trailing slash, and the Content-Type header must be set to application/json.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemagego

import (
	"encoding/json"
)

// checks if the BlobEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlobEndpoint{}

// BlobEndpoint struct for BlobEndpoint
type BlobEndpoint struct {
	// ID of endpoint.
	Id *int32 `json:"id,omitempty"`
	// Name of endpoint.
	Name *string `json:"name,omitempty"`
	Config *BlobEndpointConfig `json:"config,omitempty"`
}

// NewBlobEndpoint instantiates a new BlobEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlobEndpoint() *BlobEndpoint {
	this := BlobEndpoint{}
	return &this
}

// NewBlobEndpointWithDefaults instantiates a new BlobEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlobEndpointWithDefaults() *BlobEndpoint {
	this := BlobEndpoint{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BlobEndpoint) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobEndpoint) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BlobEndpoint) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *BlobEndpoint) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BlobEndpoint) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobEndpoint) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BlobEndpoint) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BlobEndpoint) SetName(v string) {
	o.Name = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *BlobEndpoint) GetConfig() BlobEndpointConfig {
	if o == nil || IsNil(o.Config) {
		var ret BlobEndpointConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobEndpoint) GetConfigOk() (*BlobEndpointConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *BlobEndpoint) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given BlobEndpointConfig and assigns it to the Config field.
func (o *BlobEndpoint) SetConfig(v BlobEndpointConfig) {
	o.Config = &v
}

func (o BlobEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlobEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableBlobEndpoint struct {
	value *BlobEndpoint
	isSet bool
}

func (v NullableBlobEndpoint) Get() *BlobEndpoint {
	return v.value
}

func (v *NullableBlobEndpoint) Set(val *BlobEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableBlobEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableBlobEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlobEndpoint(val *BlobEndpoint) *NullableBlobEndpoint {
	return &NullableBlobEndpoint{value: val, isSet: true}
}

func (v NullableBlobEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlobEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


