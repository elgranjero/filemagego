/*
FileMage Gateway

FileMage Gateway provides a simple API to configure storage endpoints, users, and keys. Please note that all urls must end in a trailing slash, and the Content-Type header must be set to application/json.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemagego

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	// Username.
	Username *string `json:"username,omitempty"`
	// Password.
	Password *string `json:"password,omitempty"`
	// ID of endpoint to associate with user.
	EndpointId *int32 `json:"endpointId,omitempty"`
	// The email address used for password reset and welcome emails.
	Email *string `json:"email,omitempty"`
	// Password authentication disabled.
	Disabled *bool `json:"disabled,omitempty"`
	Home *UserHome `json:"home,omitempty"`
	// Additional folder permissions assigned to the user.
	Permissions []Permission `json:"permissions,omitempty"`
	// IP addresses which are allowed to connect as this user.
	Whitelist []string `json:"whitelist,omitempty"`
	// Require multi-factor authentication to be set up before allowing user to log in.
	MfaRequired *bool `json:"mfaRequired,omitempty"`
	// Indicates that this user should be authneticated using LDAP.
	Ldap *bool `json:"ldap,omitempty"`
	// A timestamp in ISO 8601 format indicating when the users account should no longer be accessible.
	Expires *string `json:"expires,omitempty"`
	// Disable FTP protocol for this user.
	FtpDisabled *bool `json:"ftpDisabled,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *User) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *User) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *User) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *User) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *User) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *User) SetPassword(v string) {
	o.Password = &v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *User) GetEndpointId() int32 {
	if o == nil || IsNil(o.EndpointId) {
		var ret int32
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEndpointIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EndpointId) {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *User) HasEndpointId() bool {
	if o != nil && !IsNil(o.EndpointId) {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given int32 and assigns it to the EndpointId field.
func (o *User) SetEndpointId(v int32) {
	o.EndpointId = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *User) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *User) SetEmail(v string) {
	o.Email = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *User) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *User) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *User) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetHome returns the Home field value if set, zero value otherwise.
func (o *User) GetHome() UserHome {
	if o == nil || IsNil(o.Home) {
		var ret UserHome
		return ret
	}
	return *o.Home
}

// GetHomeOk returns a tuple with the Home field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHomeOk() (*UserHome, bool) {
	if o == nil || IsNil(o.Home) {
		return nil, false
	}
	return o.Home, true
}

// HasHome returns a boolean if a field has been set.
func (o *User) HasHome() bool {
	if o != nil && !IsNil(o.Home) {
		return true
	}

	return false
}

// SetHome gets a reference to the given UserHome and assigns it to the Home field.
func (o *User) SetHome(v UserHome) {
	o.Home = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *User) GetPermissions() []Permission {
	if o == nil || IsNil(o.Permissions) {
		var ret []Permission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPermissionsOk() ([]Permission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *User) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []Permission and assigns it to the Permissions field.
func (o *User) SetPermissions(v []Permission) {
	o.Permissions = v
}

// GetWhitelist returns the Whitelist field value if set, zero value otherwise.
func (o *User) GetWhitelist() []string {
	if o == nil || IsNil(o.Whitelist) {
		var ret []string
		return ret
	}
	return o.Whitelist
}

// GetWhitelistOk returns a tuple with the Whitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetWhitelistOk() ([]string, bool) {
	if o == nil || IsNil(o.Whitelist) {
		return nil, false
	}
	return o.Whitelist, true
}

// HasWhitelist returns a boolean if a field has been set.
func (o *User) HasWhitelist() bool {
	if o != nil && !IsNil(o.Whitelist) {
		return true
	}

	return false
}

// SetWhitelist gets a reference to the given []string and assigns it to the Whitelist field.
func (o *User) SetWhitelist(v []string) {
	o.Whitelist = v
}

// GetMfaRequired returns the MfaRequired field value if set, zero value otherwise.
func (o *User) GetMfaRequired() bool {
	if o == nil || IsNil(o.MfaRequired) {
		var ret bool
		return ret
	}
	return *o.MfaRequired
}

// GetMfaRequiredOk returns a tuple with the MfaRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetMfaRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.MfaRequired) {
		return nil, false
	}
	return o.MfaRequired, true
}

// HasMfaRequired returns a boolean if a field has been set.
func (o *User) HasMfaRequired() bool {
	if o != nil && !IsNil(o.MfaRequired) {
		return true
	}

	return false
}

// SetMfaRequired gets a reference to the given bool and assigns it to the MfaRequired field.
func (o *User) SetMfaRequired(v bool) {
	o.MfaRequired = &v
}

// GetLdap returns the Ldap field value if set, zero value otherwise.
func (o *User) GetLdap() bool {
	if o == nil || IsNil(o.Ldap) {
		var ret bool
		return ret
	}
	return *o.Ldap
}

// GetLdapOk returns a tuple with the Ldap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLdapOk() (*bool, bool) {
	if o == nil || IsNil(o.Ldap) {
		return nil, false
	}
	return o.Ldap, true
}

// HasLdap returns a boolean if a field has been set.
func (o *User) HasLdap() bool {
	if o != nil && !IsNil(o.Ldap) {
		return true
	}

	return false
}

// SetLdap gets a reference to the given bool and assigns it to the Ldap field.
func (o *User) SetLdap(v bool) {
	o.Ldap = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *User) GetExpires() string {
	if o == nil || IsNil(o.Expires) {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetExpiresOk() (*string, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *User) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *User) SetExpires(v string) {
	o.Expires = &v
}

// GetFtpDisabled returns the FtpDisabled field value if set, zero value otherwise.
func (o *User) GetFtpDisabled() bool {
	if o == nil || IsNil(o.FtpDisabled) {
		var ret bool
		return ret
	}
	return *o.FtpDisabled
}

// GetFtpDisabledOk returns a tuple with the FtpDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFtpDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.FtpDisabled) {
		return nil, false
	}
	return o.FtpDisabled, true
}

// HasFtpDisabled returns a boolean if a field has been set.
func (o *User) HasFtpDisabled() bool {
	if o != nil && !IsNil(o.FtpDisabled) {
		return true
	}

	return false
}

// SetFtpDisabled gets a reference to the given bool and assigns it to the FtpDisabled field.
func (o *User) SetFtpDisabled(v bool) {
	o.FtpDisabled = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.EndpointId) {
		toSerialize["endpointId"] = o.EndpointId
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Home) {
		toSerialize["home"] = o.Home
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Whitelist) {
		toSerialize["whitelist"] = o.Whitelist
	}
	if !IsNil(o.MfaRequired) {
		toSerialize["mfaRequired"] = o.MfaRequired
	}
	if !IsNil(o.Ldap) {
		toSerialize["ldap"] = o.Ldap
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.FtpDisabled) {
		toSerialize["ftpDisabled"] = o.FtpDisabled
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


