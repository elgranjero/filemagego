/*
FileMage Gateway

FileMage Gateway provides a simple API to configure storage endpoints, users, and keys. Please note that all urls must end in a trailing slash, and the Content-Type header must be set to application/json.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 1.12.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filemagego

import (
	"encoding/json"
)

// checks if the PermissionOverview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionOverview{}

// PermissionOverview struct for PermissionOverview
type PermissionOverview struct {
	// The path of the folder permission.
	Path *string `json:"path,omitempty"`
	// The number of sources applying permissions to this path.
	Count *int32 `json:"count,omitempty"`
}

// NewPermissionOverview instantiates a new PermissionOverview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionOverview() *PermissionOverview {
	this := PermissionOverview{}
	return &this
}

// NewPermissionOverviewWithDefaults instantiates a new PermissionOverview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionOverviewWithDefaults() *PermissionOverview {
	this := PermissionOverview{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PermissionOverview) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionOverview) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PermissionOverview) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PermissionOverview) SetPath(v string) {
	o.Path = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *PermissionOverview) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionOverview) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *PermissionOverview) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *PermissionOverview) SetCount(v int32) {
	o.Count = &v
}

func (o PermissionOverview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionOverview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullablePermissionOverview struct {
	value *PermissionOverview
	isSet bool
}

func (v NullablePermissionOverview) Get() *PermissionOverview {
	return v.value
}

func (v *NullablePermissionOverview) Set(val *PermissionOverview) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionOverview) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionOverview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionOverview(val *PermissionOverview) *NullablePermissionOverview {
	return &NullablePermissionOverview{value: val, isSet: true}
}

func (v NullablePermissionOverview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionOverview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


