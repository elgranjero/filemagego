openapi: 3.0.1
info:
  description: |-
    FileMage Gateway provides a simple API to configure storage endpoints, users, and keys. Please note that all urls must end in a trailing slash, and the Content-Type header must be set to application/json.

    # Authentication

    <!-- ReDoc-Inject: <security-definitions> -->
  title: FileMage Gateway
  version: 1.12.0
externalDocs:
  description: Find out more about FileMage Gateway
  url: https://docs.filemage.io
servers:
- url: https://filemage.ppfa.org:8443/
tags:
- description: Create and manage storage endpoints.
  name: Endpoints
- description: Create and manage user accounts.
  name: Users
- description: Create or remove user SSH keys.
  name: Keys
- description: Create and manage user groups.
  name: Groups
- description: View folder permissions.
  name: Permissions
- description: View audit logs.
  name: Audit
paths:
  /endpoints/:
    get:
      description: Return a list of endpoint names and corresponding endpoint IDs.
      operationId: listEndpoints
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EndpointInfo'
                type: array
          description: Success
      security:
      - api_key: []
      summary: List endpoints
      tags:
      - Endpoints
    post:
      description: Create a new endpoint using provided settings.
      operationId: createEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEndpoint_request'
        description: Endpoint configuration. Check cloud provider specific schemas
          for config parameters.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointCreated'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Missing or invalid fields
      security:
      - api_key: []
      summary: Create endpoint
      tags:
      - Endpoints
      x-codegen-request-body-name: body
  /endpoints/{id}/:
    delete:
      operationId: deleteEndpoint
      parameters:
      - description: ID of endpoint to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: Successful
        "404":
          content: {}
          description: Endpoint not found
      security:
      - api_key: []
      summary: Delete endpoint
      tags:
      - Endpoints
    get:
      description: Return detailed endpoint settings of specified endpoint.
      operationId: getEndpoint
      parameters:
      - description: ID of endpoint to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createEndpoint_request'
          description: Success
        "404":
          content: {}
          description: Endpoint not found
      security:
      - api_key: []
      summary: Get endpoint
      tags:
      - Endpoints
    put:
      description: Update settings of existing endpoint.
      operationId: updateEndpoint
      parameters:
      - description: ID of endpoint to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEndpoint_request'
        description: Endpoint configuration. Check cloud provider specific schemas
          for config parameters.
        required: true
      responses:
        "204":
          content: {}
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Missing or invalid fields
        "404":
          content: {}
          description: Endpoint not found
      security:
      - api_key: []
      summary: Update endpoint
      tags:
      - Endpoints
      x-codegen-request-body-name: body
  /users/:
    get:
      description: Return list of all active users.
      operationId: listUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserInfo'
                type: array
          description: Success
      security:
      - api_key: []
      summary: List users
      tags:
      - Users
    post:
      operationId: creatUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User settings
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Missing or invalid fields
      security:
      - api_key: []
      summary: Create user
      tags:
      - Users
      x-codegen-request-body-name: body
  /users/{id}/:
    delete:
      operationId: deleteUser
      parameters:
      - description: ID of user to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: User not found
      security:
      - api_key: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Return detailed user settings including SSH keys.
      operationId: getUser
      parameters:
      - description: ID of user to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: Success
        "404":
          content: {}
          description: User not found
      security:
      - api_key: []
      summary: Get user
      tags:
      - Users
    put:
      description: Update user settings not including keys. See `Keys` section for
        calls related to adding or removing keys.
      operationId: updateUser
      parameters:
      - description: ID of user to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User configuration
        required: true
      responses:
        "204":
          content: {}
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Missing or invalid fields
        "404":
          content: {}
          description: User not found.
      security:
      - api_key: []
      summary: Update user
      tags:
      - Users
      x-codegen-request-body-name: body
  /users/{userId}/keys/:
    post:
      description: Create or import a SSH key. When importing use the `keyData` field.
        To create a new key set `create` to `true`
      operationId: createKey
      parameters:
      - description: ID of user to associate key with
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
        description: Key settings
        required: true
      responses:
        "200":
          content:
            application/x-pem-file:
              schema:
                $ref: '#/components/schemas/KeyData'
          description: Success
        "204":
          content: {}
          description: Success
        "404":
          content: {}
          description: User not found
      security:
      - api_key: []
      summary: Add key
      tags:
      - Keys
      x-codegen-request-body-name: body
  /users/{userId}/keys/{keyId}/:
    delete:
      operationId: deleteKey
      parameters:
      - description: ID of user to remove key from
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: integer
        style: simple
      - description: ID of key to remove
        explode: false
        in: path
        name: keyId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          content: {}
          description: successful operation
        "404":
          content: {}
          description: Key not found.
      security:
      - api_key: []
      summary: Delete key
      tags:
      - Keys
  /permissions/:
    get:
      description: List all paths with permissions applied.
      operationId: viewPermissions
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PermissionOverview'
                type: array
          description: Success
      security:
      - api_key: []
      summary: Folder permissions overview
      tags:
      - Permissions
  /permissions/query/:
    get:
      description: List all permissions granted on the specified path.
      operationId: detailPermissions
      parameters:
      - description: Folder path to list permissions of.
        explode: true
        in: query
        name: path
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PermissionDetail'
                type: array
          description: Success
      security:
      - api_key: []
      summary: Folder permission detail
      tags:
      - Permissions
  /groups/:
    get:
      description: Return list of all active groups.
      operationId: listGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupInfo'
                type: array
          description: Success
      security:
      - api_key: []
      summary: List groups
      tags:
      - Groups
    post:
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: Group settings
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupCreated'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Missing or invalid fields
      security:
      - api_key: []
      summary: Create group
      tags:
      - Groups
      x-codegen-request-body-name: body
  /groups/{id}/:
    delete:
      operationId: deleteGroup
      parameters:
      - description: ID of group to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content: {}
          description: Success
        "404":
          content: {}
          description: group not found
      security:
      - api_key: []
      summary: Delete group
      tags:
      - Groups
    get:
      description: Return group settings.
      operationId: getGroup
      parameters:
      - description: ID of group to return
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Success
        "404":
          content: {}
          description: Group not found
      security:
      - api_key: []
      summary: Get group
      tags:
      - Groups
    put:
      description: Update group settings
      operationId: updateGroup
      parameters:
      - description: ID of group to update
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        description: User configuration
        required: true
      responses:
        "204":
          content: {}
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Missing or invalid fields
        "404":
          content: {}
          description: Group not found.
      security:
      - api_key: []
      summary: Update group
      tags:
      - Groups
      x-codegen-request-body-name: body
  /logs/:
    get:
      description: "Return list of all audit log entries filtered by given parameters.\
        \ Note that each request will return a maximum of 10,000 entries and no pagination\
        \ is currently available. If necessary, you must filter by a shorted time\
        \ span."
      operationId: listLogs
      parameters:
      - description: RFC 3339 timestamp of first event to return.
        explode: true
        in: query
        name: start
        required: false
        schema:
          type: string
        style: form
      - description: RFC 3339 timestamp of last event to return.
        explode: true
        in: query
        name: end
        required: false
        schema:
          type: string
        style: form
      - description: Show only events for the object at this path.
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: "The operation type to filter by. Valid values are 'cd', 'mkdir',\
          \ 'ls','get','put','stat','rmdir','rm','mv'"
        explode: true
        in: query
        name: operation
        required: false
        schema:
          type: string
        style: form
      - description: The username to filter by.
        explode: true
        in: query
        name: user
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuditLog'
                type: array
          description: Success
      security:
      - api_key: []
      summary: Get audit log entries
      tags:
      - Audit
components:
  schemas:
    EndpointInfo:
      example:
        name: name
        id: 0
      properties:
        id:
          description: The ID of the endpoint.
          type: integer
        name:
          description: Name of the endpoint.
          type: string
      type: object
    EndpointCreated:
      example:
        id: 0
      properties:
        id:
          description: The ID of the created endpoint.
          type: integer
      type: object
    BlobEndpoint:
      properties:
        id:
          description: ID of endpoint.
          type: integer
        name:
          description: Name of endpoint.
          type: string
        config:
          $ref: '#/components/schemas/BlobEndpoint_config'
      type: object
    S3Endpoint:
      properties:
        id:
          description: ID of returned endpoint.
          type: integer
        name:
          description: Name of returned endpoint.
          type: string
        config:
          $ref: '#/components/schemas/S3Endpoint_config'
      type: object
    GCSEndpoint:
      properties:
        id:
          description: ID of returned endpoint.
          type: integer
        name:
          description: Name of returned endpoint.
          type: string
        config:
          $ref: '#/components/schemas/GCSEndpoint_config'
      type: object
    UserInfo:
      example:
        endpointName: endpointName
        id: 0
        username: username
      properties:
        id:
          description: ID of returned user.
          type: integer
        username:
          description: Username
          type: string
        endpointName:
          description: Name of endpoint associated with user.
          type: string
      type: object
    User:
      example:
        password: password
        expires: expires
        ldap: true
        endpointId: 0
        permissions:
        - grants: list
          path: path
          sub: true
          endpointId: 6
          targetPath: targetPath
        - grants: list
          path: path
          sub: true
          endpointId: 6
          targetPath: targetPath
        ftpDisabled: true
        disabled: true
        whitelist:
        - whitelist
        - whitelist
        mfaRequired: true
        email: email
        username: username
        home:
          grants: grants
          path: path
          sub: true
      properties:
        username:
          description: Username.
          type: string
        password:
          description: Password.
          type: string
        endpointId:
          description: ID of endpoint to associate with user.
          type: integer
        email:
          description: The email address used for password reset and welcome emails.
          type: string
        disabled:
          description: Password authentication disabled.
          type: boolean
        home:
          $ref: '#/components/schemas/User_home'
        permissions:
          description: Additional folder permissions assigned to the user.
          items:
            $ref: '#/components/schemas/Permission'
          type: array
        whitelist:
          description: IP addresses which are allowed to connect as this user.
          items:
            type: string
          type: array
        mfaRequired:
          description: Require multi-factor authentication to be set up before allowing
            user to log in.
          type: boolean
        ldap:
          description: Indicates that this user should be authneticated using LDAP.
          type: boolean
        expires:
          description: A timestamp in ISO 8601 format indicating when the users account
            should no longer be accessible.
          type: string
        ftpDisabled:
          description: Disable FTP protocol for this user.
          type: boolean
      type: object
    UserId:
      example:
        id: 0
      properties:
        id:
          description: User ID.
          type: integer
      type: object
    UserDetail:
      example:
        otpEnabled: true
        expires: expires
        ldap: true
        endpointId: 6
        permissions:
        - grants: list
          path: path
          sub: true
          endpointId: 6
          targetPath: targetPath
        - grants: list
          path: path
          sub: true
          endpointId: 6
          targetPath: targetPath
        keys:
        - createdAt: createdAt
          keyData: keyData
          fingerprint: fingerprint
          id: 1
          title: title
        - createdAt: createdAt
          keyData: keyData
          fingerprint: fingerprint
          id: 1
          title: title
        disabled: true
        id: 0
        whitelist:
        - whitelist
        - whitelist
        mfaRequired: true
        username: username
        home:
          grants: grants
          path: path
          sub: true
      properties:
        id:
          description: User ID.
          type: integer
        username:
          description: Username.
          type: string
        endpointId:
          description: Endpoint ID associated with user.
          type: integer
        disabled:
          description: Password authentication disabled.
          type: boolean
        home:
          $ref: '#/components/schemas/User_home'
        permissions:
          description: Additional folder permissions assigned to the user.
          items:
            $ref: '#/components/schemas/Permission'
          type: array
        keys:
          description: Keys associated with this user.
          items:
            $ref: '#/components/schemas/KeyInfo'
          type: array
        whitelist:
          description: IP addresses which are allowed to connect as this user.
          items:
            type: string
          type: array
        mfaRequired:
          description: Require multi-factor authentication to be set up before allowing
            user to log in.
          type: boolean
        ldap:
          description: Indicates that this user should be authneticated using LDAP.
          type: boolean
        expires:
          description: A timestamp in ISO 8601 format indicating when the users account
            should no longer be accessible.
          type: string
        otpEnabled:
          description: Indicates that the user has configured a OTP device.
          type: boolean
      type: object
    Permission:
      example:
        grants: list
        path: path
        sub: true
        endpointId: 6
        targetPath: targetPath
      properties:
        path:
          description: The path of the folder the permission is applied to.
          type: string
        sub:
          description: Enable to recursively apply permissions to all sub-folders.
          type: boolean
        grants:
          description: Specifies the permission level granted on the path.
          enum:
          - list
          - read
          - write
          - full
          type: string
        targetPath:
          description: "When a target path is specified, any operations on the path\
            \ of the permission folder are aliased to the target path, which can be\
            \ on a different storage endpoint."
          type: string
        endpointId:
          description: Required when target path is specified. The endpoint ID of
            storage endpoint to which the target path is aliased.
          type: integer
      type: object
    KeyInfo:
      example:
        createdAt: createdAt
        keyData: keyData
        fingerprint: fingerprint
        id: 1
        title: title
      properties:
        id:
          description: Key ID.
          type: integer
        fingerprint:
          description: MD5 key fingerprint.
          type: string
        keyData:
          description: The public key associated with the key pair.
          type: string
        title:
          description: A title to display for the key.
          type: string
        createdAt:
          description: A UTC timestamp of when the key was created.
          type: string
      type: object
    Key:
      example:
        keyData: keyData
        create: false
        title: title
      properties:
        keyData:
          description: Contents of key file to import. Use either keyData or create.
          type: string
        create:
          default: false
          description: Create and return a new key. Use either keyData or create.
          type: boolean
        title:
          description: A title to display for the key.
          type: string
      type: object
    KeyData:
      description: Contents of created key file.
      type: string
    GroupInfo:
      example:
        members: 6
        name: name
        id: 0
      properties:
        id:
          description: Group ID.
          type: integer
        name:
          description: Name of the group.
          type: string
        members:
          description: Number of members in the group.
          type: integer
      type: object
    Group:
      example:
        permissions:
        - grants: list
          path: path
          sub: true
          endpointId: 6
          targetPath: targetPath
        - grants: list
          path: path
          sub: true
          endpointId: 6
          targetPath: targetPath
        members:
        - members
        - members
        name: name
        id: 0
      properties:
        id:
          description: The group ID.
          type: integer
        name:
          description: Name of the group.
          type: string
        members:
          description: Usernames of members in the group.
          items:
            type: string
          type: array
        permissions:
          description: Folder permissions assigned to the group.
          items:
            $ref: '#/components/schemas/Permission'
          type: array
      type: object
    GroupCreated:
      example:
        id: 0
      properties:
        id:
          description: The ID of the created group.
          type: integer
      type: object
    PermissionOverview:
      example:
        path: path
        count: 0
      properties:
        path:
          description: The path of the folder permission.
          type: string
        count:
          description: The number of sources applying permissions to this path.
          type: integer
      type: object
    PermissionDetail:
      example:
        grants: list
        sub: true
        name: name
        id: 0
        type: type
      properties:
        id:
          type: integer
        grants:
          description: Specifies the permission level granted on the path.
          enum:
          - list
          - read
          - write
          - full
          type: string
        sub:
          description: Enable to recursively apply permissions to all sub-folders.
          type: boolean
        name:
          description: The name of the principal this permission is applied to.
          type: string
        type:
          description: Indicates if the principal is a user or group.
          type: string
      type: object
    AuditLog:
      example:
        path: path
        user: user
        operation: operation
        timestamp: timestamp
      properties:
        timestamp:
          description: The time the event occurred.
          type: string
        path:
          description: The path of object affected.
          type: string
        user:
          description: The user invoking the operation.
          type: string
        operation:
          description: The type of operation invoked.
          type: string
      type: object
    Error:
      properties:
        message:
          description: Human readable description of the error.
          type: string
        fields:
          description: A list of fields that failed validation.
          items:
            type: string
          type: array
      type: object
    createEndpoint_request:
      oneOf:
      - $ref: '#/components/schemas/BlobEndpoint'
      - $ref: '#/components/schemas/S3Endpoint'
      - $ref: '#/components/schemas/GCSEndpoint'
    BlobEndpoint_config:
      description: Settings specific to the Azure Blob Storage endpoint types.
      properties:
        accountKey:
          description: Azure storage account secret key.
          type: string
        accountName:
          description: Azure storage account name.
          type: string
        containerName:
          description: Azure storage Blob container.
          type: string
        isHNS:
          description: Set to true if the Blob container has Hierarchical namespaces
            enabled.
          type: boolean
        useMSI:
          description: Enabled to use the managed service identify associated with
            the instance to authenticate.
          type: boolean
        userAssignedId:
          description: Client ID of a user assigned managed system identity to use
            for authentication.
          type: string
        type:
          description: Storage endpoint type. Use "azure" when connecting to Azure
            Blob Storage.
          enum:
          - azure
          type: string
      type: object
    S3Endpoint_config:
      description: Settings specific to Amazon S3 endpoint types.
      properties:
        type:
          description: Storage endpoint type. Use "aws" when connecting to Amazon
            S3.
          enum:
          - aws
          type: string
        bucketName:
          description: The Amazon S3 bucket name.
          type: string
        accessKey:
          description: The access key to use to authenticate.
          type: string
        secretKey:
          description: The secret key to use to authenticate.
          type: string
        useIamRole:
          description: Enabled to use the IAM role associated with the instance to
            authenticate.
          type: boolean
        SSE:
          description: The server side encryption type to use when creating objects.
          type: string
        kmsKeyArn:
          description: The ARN of the KMS key to use when creating objects.
          type: string
      type: object
    GCSEndpoint_config:
      description: Settings specific to the Google Cloud Storage endpoint types.
      properties:
        bucketName:
          description: The Google Cloud Storage bucket name.
          type: string
        credentials:
          description: A base64 encoded Google Cloud JSON credentials file used to
            authenticate.
          type: string
        useVMSA:
          description: Enabled to use service account associated with the instance
            to authenticate.
          type: boolean
        type:
          description: Storage endpoint type. Use "gcp" when connecting to Google
            Cloud Storage.
          enum:
          - gcp
          type: string
      type: object
    User_home:
      description: "Specify path, and permission level of user home directory"
      example:
        grants: grants
        path: path
        sub: true
      properties:
        path:
          description: Path of user home directory.
          type: string
        sub:
          description: Recursively apply permissions to all sub-folders.
          type: boolean
        grants:
          description: "Specifies permission level granted on home directory. Allowed\
            \ values are 'list', 'read', 'write', 'full'."
          type: string
      type: object
  securitySchemes:
    api_key:
      description: |-
        After registering an administrator account, go to the settings page to create a API key. Include this token in all calls to the API.

         Example:

         `curl http://sftp.example.com/users/ -H "filemage-api-token: 43fb7437e3f231e481b262ca6d4de0c0"`
      in: header
      name: filemage-api-token
      type: apiKey
